# Todos los switches a 100Mbps 
[Config Escenario100M]
network = Escenario100M

# Switch D a 1Gbps 
[Config Escenario1G]
network = Escenario1G

#1.a) Dos escenarios-> Red 100m All switch Fasy-Ethernet Type
				 #Switch D Gigabit ethernet , others Red 100m All switch Fasy-Ethernet Type

[General]
sim-time-limit = 10s
#1.b) La simulacion dura 10s
record-eventlog = false

**.Switch[*].csmacdSupport = false
**.eth[*].mac.duplexMode = true
**.eth[*].queueType = "DropTailQueue"
**.mac[*].duplexMode = true

############# Configuración UDP de los clientes
############# UDP configuration for clients

# Nodos que ejecutan aplicación UDP
# Hosts running UDP application
#UDP: A, B ,C y primera mitad de D
**.hostsA[*].numUdpApps = 1
**.hostsB[*].numUdpApps = 1
**.hostsC[*].numUdpApps = 1
**.hostsD[0..3].numUdpApps = 1 # Primera mitad de nodos en D
                               # First half of nodes inside D

# Puertos UDP destino (el puerto local se ignora porque los clientes no reciben nada)
# UDP destination ports (local port is gnored since clients do not receive anything)
**.hostsD[*].udpApp[*].destPort = 1000 # Solo para nodos del lab D
                                       # Only for hosts in lab D
**.hosts*[*].udpApp[*].destPort = 1001 # Resto de nodos (los parametros definidos antes NO SE REESCRIBEN)
                                       # Any other node (parameters defined before are NOT OVERWRITTEN)

# Parametros comunes a todas las aplicaciones UDP
# Parameters shared by all nodes running UDP applications
**.hosts*[*].udpApp[*].typename = "UDPBasicBurst"
**.hosts*[*].udpApp[*].startTime = uniform(0s,0.1s)
**.hosts*[*].udpApp[*].destAddresses = moduleListByPath("**.server[0]")
**.hosts*[*].udpApp[*].chooseDestAddrMode = "once"
**.hosts*[*].udpApp[*].sleepDuration = 0s
**.hosts*[*].udpApp[*].burstDuration = 3s
**.hosts*[*].udpApp[*].messageLength = 1440B
**.hosts*[*].udpApp[*].sendInterval = 0.00288s+uniform(-0.0001s,0.0001s)

############# Configuracion TCP de los clientes
############# TCP configuration for clients

# Nodos que ejecutan aplicación TCP
# Hosts running TCP application Estos son los Clientes
#TCP: E, F ,G y mitad de D
**.hostsE[*].numTcpApps = 1
**.hostsF[*].numTcpApps = 1
**.hostsG[*].numTcpApps = 1
**.hostsD[4..7].numTcpApps = 1 # Segunda mitad de nodos en D 
                               # Second half of nodes inside D

# Puertos TCP destino
# TCP destination ports
**.hostsD[*].tcpApp[*].connectPort = 1000 # Solo para nodos del lab D
                                          # Only for hosts in lab D
**.hosts*[*].tcpApp[*].connectPort = 1001 # Resto de nodos. Los parametros definidos antes NO SE REESCRIBEN
                                          # Any other node. Parameters defined before are NOT OVERWRITTEN

# Parametros comunes a todas las aplicaciones TCP
# Parameters shared by all nodes running TCP applications
**.hosts*[*].tcpApp[*].typename = "TCPSessionApp"
**.hosts*[*].tcpApp[*].connectAddress = "server[0]"
**.hosts*[*].tcpApp[*].dataTransferMode = "bytecount"
**.hosts*[*].tcpApp[*].sendBytes = 100MiB

############# Configuración del servidor
############# Server configuration

# UDP
**.server[*].numUdpApps = 2
**.server[*].udpApp[*].typename = "UDPSink"
**.server[*].udpApp[0].localPort = 1000
**.server[*].udpApp[1].localPort = 1001

# TCP
**.server[*].numTcpApps = 2
**.server[*].tcpApp[*].typename = "TCPSinkApp"
**.server[*].tcpApp[0].localPort = 1000
**.server[*].tcpApp[1].localPort = 1001

# 1.C) 2 UDP + 2 TCP, las diferenciamos cada  uno por el puerto tcpApp[0] y udpApp[0]
#		Tenemos dos puertos para cada uno, para poder diferencias los host conectados a la misma red D
#		y los host de otras redes.
#			exem: udpApp[0] (Red D, propia del switch)
#                 udpApp[1] (Resto de redes externas que utilizen el udp)

### Configuración del switch
### Switch configuration

**.relayUnit.pauseUnits = 0
**.Switch[*].**.InputQueuePerPort = true
**.Switch[*].**.OutputQueuePerPort = false
